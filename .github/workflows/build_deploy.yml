name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build_windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies
        run: npm ci

      - name: Get Project Version
        id: get_version
        run: echo ::set-output name=version::$(node -p "require('./package.json').version")

      - name: Build application for Windows
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run make:win

      - name: Publish application
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run publish

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          repository: "XectaDigitalLab/Release"
          tag_name: v${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false
          token: ${{ secrets.GH_TOKEN }}
          files: "D:/a/electronX/electronX/out/make/squirrel.windows/x64/*.exe"

  build_mac:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies
        run: |
          python3 -m pip install setuptools
          npm ci

      - name: Get Project Version
        id: get_version
        run: echo ::set-output name=version::$(node -p "require('./package.json').version")

      - name: Build application for macOS
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run make:mac

      - name: Publish application
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run publish

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          repository: "usersuyashpandey/Release"
          tag_name: v${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false
          token: ${{ secrets.GH_TOKEN }}
          files: "/Users/runner/work/electronX/electronX/out/make/*.dmg"
