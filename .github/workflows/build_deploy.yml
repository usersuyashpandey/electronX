name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  configure-git:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      discussions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Git user and bump version
        run: |
          git config --global user.email "suyashpandey152@gmail.com"
          git config --global user.name "usersuyashpandey"
          npm version patch -m "Automatic version bump to %s [skip ci]"
          echo "${version}"
          git push origin HEAD:main --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Merge version bump commit
        run: |
          git fetch origin main
          git checkout main
          git merge --ff-only HEAD@{1}

      - name: Push merged changes
        run: git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Pull latest changes
        run: git pull origin main

  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
      discussions: write
    needs: configure-git

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          OLD_VERSION=$(npm show . version)
          NEW_VERSION=$(node -p 'require("./package.json").version')
          if [ $NEW_VERSION != $OLD_VERSION ]; then
            echo "New version $NEW_VERSION detected"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            git log "$OLD_VERSION"..HEAD
          else
            echo "Version $OLD_VERSION hasn't changed, skipping the release"
          fi

      - name: Create a git tag
        if: ${{ steps.version.outputs.version }}
        run: git tag $NEW_VERSION && git push --tags
        env:
          NEW_VERSION: ${{ steps.version.outputs.version }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Pull latest changes
        run: git pull origin main

      - name: Install dependencies
        run: npm install

      - name: Build Electron app for Windows
        run: npm run make:win

      - name: Release to GitHub
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: |
            D:/a/electronX/electronX/out/make/squirrel.windows/x64/*.exe
          tag_name: ${{ steps.version.outputs.version }}
          repository: usersuyashpandey/Release

  build-macos:
    runs-on: macos-latest
    permissions:
      contents: write
      discussions: write
    needs: configure-git

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          OLD_VERSION=$(npm show . version)
          NEW_VERSION=$(node -p 'require("./package.json").version')
          if [ $NEW_VERSION != $OLD_VERSION ]; then
            echo "New version $NEW_VERSION detected"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            git log "$OLD_VERSION"..HEAD
          else
            echo "Version $OLD_VERSION hasn't changed, skipping the release"
          fi

      - name: Create a git tag
        if: ${{ steps.version.outputs.version }}
        run: git tag $NEW_VERSION && git push --tags
        env:
          NEW_VERSION: ${{ steps.version.outputs.version }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install setuptools
        run: |
          python3 -m pip install setuptools
          npm ci

      - name: Pull latest changes
        run: git pull origin main

      - name: Install dependencies
        run: npm install

      - name: Build Electron app for macOS
        run: npm run make:mac

      - name: Release to GitHub
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: |
            /Users/runner/work/electronX/electronX/out/make/*.dmg
            tag_name: ${{ steps.version.outputs.version }}
          repository: usersuyashpandey/Release
